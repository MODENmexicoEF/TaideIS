// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuProyecto.Data;

#nullable disable

namespace TAIDE.BACKEND.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428095945_AddEstadoPaciente")]
    partial class AddEstadoPaciente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FamiliarPaciente", b =>
                {
                    b.Property<int>("FamiliaresID")
                        .HasColumnType("int");

                    b.Property<int>("PacientesID")
                        .HasColumnType("int");

                    b.HasKey("FamiliaresID", "PacientesID");

                    b.HasIndex("PacientesID");

                    b.ToTable("FamiliarPaciente");
                });

            modelBuilder.Entity("PreguntaSeguridad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("preguntasseguridad", (string)null);
                });

            modelBuilder.Entity("TuProyecto.Models.PacientesFamiliares", b =>
                {
                    b.Property<int>("IdPacienteFamiliar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pacientefamiliar");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPacienteFamiliar"));

                    b.Property<int>("IdFamiliar")
                        .HasColumnType("int")
                        .HasColumnName("id_familiar");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("id_paciente");

                    b.HasKey("IdPacienteFamiliar");

                    b.HasIndex("IdFamiliar");

                    b.HasIndex("IdPaciente", "IdFamiliar")
                        .IsUnique();

                    b.ToTable("PacientesFamiliares", (string)null);
                });

            modelBuilder.Entity("TuProyecto.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Ap1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Ap1");

                    b.Property<string>("Ap2")
                        .HasColumnType("longtext")
                        .HasColumnName("Ap2");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contrasena");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("correo");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_usuario");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int")
                        .HasColumnName("tipo_usuario");

                    b.Property<DateTime?>("UltimaActividad")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("NombreUsuario")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TuProyecto.Models.Familiar", b =>
                {
                    b.HasBaseType("TuProyecto.Models.Usuario");

                    b.ToTable("familiares", (string)null);
                });

            modelBuilder.Entity("TuProyecto.Models.PM", b =>
                {
                    b.HasBaseType("TuProyecto.Models.Usuario");

                    b.Property<string>("Especialidad")
                        .HasColumnType("longtext")
                        .HasColumnName("especialidad");

                    b.Property<string>("NumeroColegiado")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("numero_colegiado");

                    b.HasIndex("NumeroColegiado")
                        .IsUnique();

                    b.ToTable("pms", (string)null);
                });

            modelBuilder.Entity("TuProyecto.Models.Paciente", b =>
                {
                    b.HasBaseType("TuProyecto.Models.Usuario");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_nacimiento");

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("TuProyecto.Models.SUDO", b =>
                {
                    b.HasBaseType("TuProyecto.Models.Usuario");

                    b.ToTable("SUDOs");
                });

            modelBuilder.Entity("FamiliarPaciente", b =>
                {
                    b.HasOne("TuProyecto.Models.Familiar", null)
                        .WithMany()
                        .HasForeignKey("FamiliaresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuProyecto.Models.Paciente", null)
                        .WithMany()
                        .HasForeignKey("PacientesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreguntaSeguridad", b =>
                {
                    b.HasOne("TuProyecto.Models.Usuario", "Usuario")
                        .WithMany("PreguntasSeguridad")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TuProyecto.Models.PacientesFamiliares", b =>
                {
                    b.HasOne("TuProyecto.Models.Familiar", "Familiar")
                        .WithMany("PacientesFamiliares")
                        .HasForeignKey("IdFamiliar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TuProyecto.Models.Paciente", "Paciente")
                        .WithMany("PacientesFamiliares")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("TuProyecto.Models.Familiar", b =>
                {
                    b.HasOne("TuProyecto.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("TuProyecto.Models.Familiar", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TuProyecto.Models.PM", b =>
                {
                    b.HasOne("TuProyecto.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("TuProyecto.Models.PM", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TuProyecto.Models.Paciente", b =>
                {
                    b.HasOne("TuProyecto.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("TuProyecto.Models.Paciente", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TuProyecto.Models.SUDO", b =>
                {
                    b.HasOne("TuProyecto.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("TuProyecto.Models.SUDO", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TuProyecto.Models.Usuario", b =>
                {
                    b.Navigation("PreguntasSeguridad");
                });

            modelBuilder.Entity("TuProyecto.Models.Familiar", b =>
                {
                    b.Navigation("PacientesFamiliares");
                });

            modelBuilder.Entity("TuProyecto.Models.Paciente", b =>
                {
                    b.Navigation("PacientesFamiliares");
                });
#pragma warning restore 612, 618
        }
    }
}
